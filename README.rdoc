= Papermill

Asset management made easy.

== Install the gem!

  $ sudo gem install papermill

== Try the demo!
  
  $ sudo gem install sqlite3-ruby
  $ rails -m http://gist.github.com/177714.txt papermill-example
  $ cd papermill-example
  $ ./script/server
  $ GoTo localhost:3000 and try to create an article with assets but without title
  
== Papermill comes in 2 flavors:

=== Generic catch-all declaration

  papermill my_option_hash                              # in your papermilled assetable model
  assets_upload(:my_key, my_option_hash)          # form helper call
  @assetable.papermill_assets(:my_key)                  # data access in your view

=== Association specific declaration

  papermill :my_association, my_option_hash             # in your papermilled assetable model
  assets_upload(:my_association, my_option_hash)  # form helper call
  @assetable.my_association                             # data access in your view


In both case, you can specify a PapermillAsset subclass to use with :class_name => MyPapermillAssetSubclass in the option hash
You can have a catch-all declaration and as many specific association as you want in your model (as long as they use different keys)
It's up to you. You can use the first one only, the second only or both.

See papermill_module.rb for the complete list of options.

== Installation

=== Once you've installed the gem, generate a migration and copy a couple of static assets:

  # copy static assets and generate a migration
  $ ./script/generate papermill PapermillMigration
  $ rake db:migrate

=== Then in environment.rb:

  config.gem papermill
  
=== You can also modify a couple of default options that will be available application-wide :
  
  Papermill::OPTIONS = {
    :thumbnail => {
      :width => 150,
      :height => 100
    },
    :aliases => {
      :big => "500x500>"
      :small => "100x100>"
    },
    :public_root => ":rails_root/public",         # already a default
    :papermill_prefix => "system/papermill"       # already a default
  }
  # see lib/papermill/papermill_module.rb for more options.
  
=== In your assetable model:
  
  # You can set a catch-all papermill association : 
  papermill :class_name => Asset
  
  # or create an association for the specific :my_gallery key
  papermill :my_gallery,
    :class_name => GalleryAsset,
    :thumbnail => {
        :width => 90,
        :height => 30
    }

=== In your layout:

  <%= papermill_stylesheet_tag %>
  <%= papermill_javascript_tag :with_jquery => "no_conflict" %>
  # you won't need :with_jquery if you use it already, obviously.
  
=== In your edit form: 

  f.images_upload(:my_gallery)     # use specific papermill :my_gallery declaration
  f.assets_upload(:my_assets)      # use catch-all
  f.asset_upload(:my_other_asset)  # use catch-all
  
=== Access them with:
  
  @assetable.my_gallery.each{ |image| image_tag image.url("100x100") }
  @assetable.papermill_assets(:my_assets).each{ |asset| asset.url }
  @assetable.papermill_assets(:my_other_asset).first.url

Also see http://gist.github.com/177714.txt for more precises installation steps.
Have a look at the API here http://rdoc.info/projects/BBenezech/papermill

=== Translations:

Papermill is fully I18n-able.
Copy config/locales/papermill.yml to your root config/locale folder to modify any wording in a any locale.


== Word of caution:

Beta. Wait for gem 1.0.0 for the production ready thing.
This is xNIX only (system("rm ...")).
Rails 2.3


Copyright (c) 2009 Benoit Bénézech, released under the MIT license