= Papermill 

Asset management made easy.

== Install the gem
  
  $ gem source -a http://gemcutter.org # Needed for paperclip (installed as a dependency) : Rubyforge's version is too old..
  $ sudo gem install papermill
 
== Try the demo
  
  $ sudo gem install sqlite3-ruby
  $ rails -m http://github.com/bbenezech/papermill/raw/master/installation-template.txt papermill-example
  $ cd papermill-example
  $ ./script/server
  Open localhost:3000 in your browser and try to create an article with assets but without title

== Features

- Ajax uploading form helpers through SWFUpload: 
* image_upload => unique image upload field, with preview
* images_upload => sortable image gallery upload field
* asset_upload => simple one asset field
* assets_upload => sortable asset list field
- choose thumbnail size for images previews : 
* {:thumbnail => {:width => 100, :height => 100}}
* {:thumbnail => {:style => "100x100>"}}
* {:thumbnail => {:width => 100, :aspect_ratio => 4.0/3.0 }}
- Asset edit form: 
* double-click on any asset in any helper to access&edit his properties
* with pop-up/shadowbox/facebox, out of the box (or use your own pop-up system, dead-easy)
- Lazy created thumbnails
* thumbnails are generated the first time they are asked-for, and only in the requested size. 
* no need to register thumbnail size anywhere: my_asset.url("100x100>")
- Alias handling, declaration application-wide
* :big_alias => {:geometry => "1000x>"}
* :other_alias => "100x>"
* :third_alias => {:crop => '100:122', :size => '89x109>', :gravity => 'NorthGravity'}
* and use them when you need them : my_asset.url(:big_alias)
- Nice-looking URLs: /system/papermill/000/000/001/my_alias/my-image-name.jpg

== Papermill comes in 2 flavors:

=== Generic catch-all declaration

  papermill {options}                                     # in your papermilled assetable model
  assets_upload(:my_key, {options})                       # form helper call
  form.input :my_key, :as => :assets_upload, {options}    # if you are using formtastic
  @assetable.assets(:my_key)                              # data access in your view

=== Association specific declaration

  papermill :my_association, {options}               # in your papermilled assetable model
  assets_upload(:my_association, {options})          # form helper call
  @assetable.my_association                          # data access in your view


In both case, you can specify a PapermillAsset subclass to use with :class_name => MyPapermillAssetSubclass in the option hash.

You can have a catch-all declaration and as many specific association as you want in your model (as long as they use different keys).

You can use the first one only, the second only or both.

See papermill_module.rb for the complete list of options.

== Installation

=== Once gem is installed :

  # Generate migration :
  $ ./script/generate papermill_table PapermillMigration
  $ rake db:migrate
  # copy static assets to your public directory:
  $ ./script/generate papermill_assets
  
=== Then in environment.rb:
  
  ...
  Rails::Initializer.run do |config|
    ...
    config.gem papermill
    
    # You can set application-wide options inside or BEFORE Rails::Initializer :
    module Papermill
      OPTIONS = {
        :thumbnail => {
          :width => 150,
          :height => 100
        },
        :aliases => {
          :big => "500x500>",
          :small => "100x100>"
        },
        :public_root => ":rails_root/public",         # already a default
        :papermill_prefix => "system/papermill"       # already a default
      }
    end
    # see lib/papermill/papermill_module.rb
    ...
    # Needed for Windows OS !! (mime type from file extension): 
    config.gem "mime-types", :lib => "mime/types"
  end

=== In your layout:

  <%= papermill_stylesheet_tag %>
  <%= papermill_javascript_tag :with_jquery => "no_conflict" %>
  # you won't need :with_jquery if you have it already.


=== In your assetable model:

  # You can set a catch-all papermill association: 
  papermill {options}

  # or create an association for a specific key:
  papermill :my_gallery, {options}

=== In your edit form: 

  f.images_upload(:my_gallery)     # use specific papermill :my_gallery declaration to find related options
  f.assets_upload(:my_assets)      # use catch-all
  f.asset_upload(:my_other_asset)  # use catch-all
  
=== Access them in your views:
  
  @assetable.my_gallery.each{ |image| image_tag image.url("100x100") }

Also see http://github.com/bbenezech/papermill/raw/master/installation-template.txt
Have a look at the API here http://rdoc.info/projects/bbenezech/papermill

=== Translations:

Papermill is fully I18n-able.
Copy config/locales/papermill.yml to your root config/locale folder to modify any wording in a any locale.

Copyright (c) 2009 Benoit Bénézech, released under the MIT license

http://rubyonrails.org/images/rails.png